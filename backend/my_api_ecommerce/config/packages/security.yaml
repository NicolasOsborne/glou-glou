security:
    # ... (le reste de votre configuration)
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Firewall pour l'authentification JSON Login
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Firewall spécifique pour l'inscription
        registration:
            pattern: ^/api/register
            stateless: true
            security: false  # Désactiver la sécurité pour cette route

        # Firewall pour l'API qui nécessite un token JWT
        api:
            pattern: ^/api
            stateless: true
            jwt: ~

    access_control:
        # Accès à l'enregistrement sans authentification
        - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Accès au login sans authentification
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # Autres routes API nécessitant authentification
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
